#include <iostream>
#include <queue>
using namespace std;

class Graph {
private:
    int numVertices;
    int **adjMatrix;
public:
    Graph(int numVertices) {
        this->numVertices = numVertices;
        adjMatrix = new int*[numVertices];
        for (int i = 0; i < numVertices; ++i) {
            adjMatrix[i] = new int[numVertices];
            for (int j = 0; j < numVertices; ++j) {
                adjMatrix[i][j] = 0;
            }
        }
    }

    ~Graph() {
        for (int i = 0; i < numVertices; ++i) {
            delete[] adjMatrix[i];
        }
        delete[] adjMatrix;
    }

    void addEdge(int src, int dest) {
        adjMatrix[src][dest] = 1;
    }

    void DFS(int startNode) {
        bool *visited = new bool[numVertices];
        for (int i = 0; i < numVertices; ++i) {
            visited[i] = false;
        }
        DFSUtil(startNode, visited);
        delete[] visited;
    }

    void BFS(int startNode) {
        bool *visited = new bool[numVertices];
        for (int i = 0; i < numVertices; ++i) {
            visited[i] = false;
        }
        int *queue = new int[numVertices];
        int front = 0, rear = 0;
        visited[startNode] = true;
        queue[rear++] = startNode;
        while (front != rear) {
            int currentNode = queue[front++];
            cout << currentNode << " ";
            for (int i = 0; i < numVertices; ++i) {
                if (adjMatrix[currentNode][i] && !visited[i]) {
                    visited[i] = true;
                    queue[rear++] = i;
                }
            }
        }
        delete[] visited;
        delete[] queue;
    }
private:
    void DFSUtil(int startNode, bool visited[]) {
        visited[startNode] = true;
        cout << startNode << " ";
        for (int i = 0; i < numVertices; ++i) {
            if (adjMatrix[startNode][i] && !visited[i]) {
                DFSUtil(i, visited);
            }
        }
    }
};

int main() {
    int numCities, numEdges;
    cout << "Enter the number of cities: ";
    cin >> numCities;
    Graph graph(numCities);
    cout << "Enter the number of edges: ";
    cin >> numEdges;
    cout << "Enter the edges (source destination):" << endl;
    for (int i = 0; i < numEdges; ++i) {
        int src, dest;
        cin >> src >> dest;
        graph.addEdge(src, dest);
    }
    int startNode;
    cout << "Enter the starting node for DFS and BFS: ";
    cin >> startNode;
    cout << "DFS Traversal: ";
    graph.DFS(startNode);
    cout << endl;
    cout << "BFS Traversal: ";
    graph.BFS(startNode);
    cout << endl;
    return 0;
}
